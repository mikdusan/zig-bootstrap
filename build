#!/bin/sh

set -e

JOBS="$1"
TARGET="$2" # Example: riscv64-linux-gnu
MCPU="$3" # Examples: `baseline`, `native`, `generic+v7a`, or `arm1176jzf_s`

ROOTDIR="$(pwd)"
ZIG_VERSION="0.8.0-dev.1417+939f33422"

TARGET_OS_AND_ABI=${TARGET#*-} # Example: linux-gnu

# Here we map the OS from the target triple to the value that CMake expects.
TARGET_OS_CMAKE=${TARGET_OS_AND_ABI%-*} # Example: linux
case $TARGET_OS_CMAKE in
  macos) TARGET_OS_CMAKE="Darwin";;
  freebsd) TARGET_OS_CMAKE="FreeBSD";;
  windows) TARGET_OS_CMAKE="Windows";;
  linux) TARGET_OS_CMAKE="Linux";;
  native) TARGET_OS_CMAKE="";;
esac

CMAKE_EXE=$(which cmake)

# Host-specific behavior.
HOST_OS=`uname -s`
case $HOST_OS in
  Darwin)
    # Set minimal path.
    PATH=/usr/bin:/bin:/usr/sbin:/sbin

    # Force zig to use system-linker to enable adhoc-codesigning.
    # This is a requirement for macOS 11.2 arm64.
    export ZIG_SYSTEM_LINKER_HACK=1

    SDK_PATH=`xcrun --show-sdk-path`
    CMAKE_FIND_USE_CMAKE_SYSTEM_PATH=OFF
    CMAKE_INCLUDE_PATH="$SDK_PATH/usr/include"
    CMAKE_LIBRARY_PATH="$SDK_PATH/usr/lib"
    CMAKE_FRAMEWORK_PATH="$SDK_PATH/System/Library/Frameworks"
    ;;
  *)
    SDK_PATH=
    CMAKE_FIND_USE_CMAKE_SYSTEM_PATH=ON
    CMAKE_INCLUDE_PATH=
    CMAKE_LIBRARY_PATH=
    CMAKE_FRAMEWORK_PATH=
    ;;
esac

# First build the libraries for Zig to link against, as well as native `llvm-tblgen`.
mkdir -p "$ROOTDIR/out/build-llvm-host"
cd "$ROOTDIR/out/build-llvm-host"
$CMAKE_EXE "$ROOTDIR/llvm" \
  -DLLVM_ENABLE_PROJECTS="lld;clang" \
  -DLLVM_ENABLE_LIBXML2=OFF \
  -DCMAKE_INSTALL_PREFIX="$ROOTDIR/out/host" \
  -DCMAKE_PREFIX_PATH="$ROOTDIR/out/host" \
  -DCMAKE_FIND_USE_CMAKE_SYSTEM_PATH="$CMAKE_FIND_USE_CMAKE_SYSTEM_PATH" \
  -DCMAKE_INCLUDE_PATH="$CMAKE_INCLUDE_PATH" \
  -DCMAKE_LIBRARY_PATH="$CMAKE_LIBRARY_PATH" \
  -DCMAKE_FRAMEWORK_PATH="$CMAKE_FRAMEWORK_PATH" \
  -DLLVM_INCLUDE_TESTS=OFF \
  -DLLVM_INCLUDE_GO_TESTS=OFF \
  -DLLVM_INCLUDE_EXAMPLES=OFF \
  -DLLVM_INCLUDE_BENCHMARKS=OFF \
  -DLLVM_ENABLE_BINDINGS=OFF \
  -DLLVM_ENABLE_OCAMLDOC=OFF \
  -DLLVM_ENABLE_Z3_SOLVER=OFF \
  -DCLANG_BUILD_TOOLS=OFF \
  -DCMAKE_BUILD_TYPE=Release
make "$JOBS" install

# Now we build Zig, still with system C/C++ compiler, linking against LLVM,
# Clang, LLD we just built from source.
mkdir -p "$ROOTDIR/out/build-zig-host"
cd "$ROOTDIR/out/build-zig-host"
$CMAKE_EXE "$ROOTDIR/zig" \
  -DCMAKE_INSTALL_PREFIX="$ROOTDIR/out/host" \
  -DCMAKE_PREFIX_PATH="$ROOTDIR/out/host" \
  -DCMAKE_BUILD_TYPE=Release \
  -DZIG_VERSION="$ZIG_VERSION"
make "$JOBS" install

# Now we have Zig as a cross compiler.
ZIG="$ROOTDIR/out/host/bin/zig"
export CC="$ZIG cc -fno-sanitize=all -target $TARGET -mcpu=$MCPU"
export CXX="$ZIG c++ -fno-sanitize=all -target $TARGET -mcpu=$MCPU"

# Rebuild LLVM with Zig.
mkdir -p "$ROOTDIR/out/build-llvm-$TARGET-$MCPU"
cd "$ROOTDIR/out/build-llvm-$TARGET-$MCPU"
$CMAKE_EXE "$ROOTDIR/llvm" \
  -DLLVM_ENABLE_PROJECTS="lld;clang" \
  -DLLVM_ENABLE_LIBXML2=OFF \
  -DLLVM_ENABLE_TERMINFO=OFF \
  -DLLVM_ENABLE_ZLIB=OFF \
  -DLLVM_ENABLE_BACKTRACES=OFF \
  -DCMAKE_INSTALL_PREFIX="$ROOTDIR/out/$TARGET-$MCPU" \
  -DCMAKE_PREFIX_PATH="$ROOTDIR/out/$TARGET-$MCPU" \
  -DCMAKE_FIND_USE_CMAKE_SYSTEM_PATH="$CMAKE_FIND_USE_CMAKE_SYSTEM_PATH" \
  -DCMAKE_INCLUDE_PATH="$CMAKE_INCLUDE_PATH" \
  -DCMAKE_LIBRARY_PATH="$CMAKE_LIBRARY_PATH" \
  -DCMAKE_FRAMEWORK_PATH="$CMAKE_FRAMEWORK_PATH" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_CROSSCOMPILING=True \
  -DCMAKE_SYSTEM_NAME="$TARGET_OS_CMAKE" \
  -DCMAKE_AR="$ROOTDIR/out/host/bin/llvm-ar" \
  -DCMAKE_RANLIB="$ROOTDIR/out/host/bin/llvm-ranlib" \
  -DLLVM_TABLEGEN="$ROOTDIR/out/host/bin/llvm-tblgen" \
  -DCLANG_TABLEGEN="$ROOTDIR/out/build-llvm-host/bin/clang-tblgen" \
  -DLLVM_BUILD_TOOLS=OFF \
  -DLLVM_INCLUDE_UTILS=OFF \
  -DLLVM_INCLUDE_TESTS=OFF \
  -DLLVM_INCLUDE_GO_TESTS=OFF \
  -DLLVM_INCLUDE_EXAMPLES=OFF \
  -DLLVM_INCLUDE_BENCHMARKS=OFF \
  -DLLVM_ENABLE_BINDINGS=OFF \
  -DLLVM_ENABLE_OCAMLDOC=OFF \
  -DLLVM_ENABLE_Z3_SOLVER=OFF \
  -DCLANG_BUILD_TOOLS=OFF \
  -DCLANG_ENABLE_ARCMT=ON \
  -DLLVM_BUILD_STATIC=ON \
  -DLIBCLANG_BUILD_STATIC=ON \
  -DLLVM_DEFAULT_TARGET_TRIPLE="$TARGET"
cd "$ROOTDIR/out/build-llvm-$TARGET-$MCPU/tools/lld"
make "$JOBS" install
cd "$ROOTDIR/out/build-llvm-$TARGET-$MCPU/tools/clang/lib"
make "$JOBS" install
cd "$ROOTDIR/out/build-llvm-$TARGET-$MCPU/lib"
make "$JOBS" install
cd "$ROOTDIR/out/build-llvm-$TARGET-$MCPU"
make "$JOBS" install-llvm-headers install-clang-headers install-LLVMSupport install-LLVMDemangle

# Finally, we can cross compile Zig itself, with Zig.
mkdir -p "$ROOTDIR/out/build-zig-$TARGET-$MCPU"
cd "$ROOTDIR/out/build-zig-$TARGET-$MCPU"
$CMAKE_EXE "$ROOTDIR/zig" \
  -DCMAKE_INSTALL_PREFIX="$ROOTDIR/out/zig-$TARGET-$MCPU" \
  -DCMAKE_PREFIX_PATH="$ROOTDIR/out/$TARGET-$MCPU" \
  -DCMAKE_CROSSCOMPILING=True \
  -DCMAKE_SYSTEM_NAME="$TARGET_OS_CMAKE" \
  -DCMAKE_AR="$ROOTDIR/out/host/bin/llvm-ar" \
  -DCMAKE_RANLIB="$ROOTDIR/out/host/bin/llvm-ranlib" \
  -DCMAKE_BUILD_TYPE=Release \
  -DZIG_TARGET_TRIPLE="$TARGET" \
  -DZIG_TARGET_MCPU="$MCPU" \
  -DZIG_EXECUTABLE="$ZIG" \
  -DZIG_VERSION="$ZIG_VERSION"
unset CC
unset CXX
make "$JOBS" install
